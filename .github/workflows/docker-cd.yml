name: Docker CD

on:
  workflow_run:
    workflows: ["Docker CI"]
    types: [completed]
  workflow_dispatch: {}

concurrency:
  group: "docker-cd-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy to VPS
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate secrets
        run: |
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "::error::Missing VPS_HOST"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_USERNAME }}" ]; then
            echo "::error::Missing VPS_USERNAME"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
            echo "::error::Missing VPS_SSH_KEY"
            exit 1
          fi
          if [ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" ]; then
            echo "::error::Missing FIREBASE_SERVICE_ACCOUNT"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "::error::Missing DOCKER_HUB_USERNAME"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]; then
            echo "::error::Missing DOCKER_HUB_ACCESS_TOKEN"
            exit 1
          fi
          echo "Secrets validated âœ…"

      - name: Pack infra
        run: tar -czf infra.tar.gz -C infra .

      - name: SSH connectivity check
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            echo "SSH OK on $(hostname)"
            whoami
            uname -a

      - name: Prepare /opt/app on VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            sudo rm -rf /opt/app/* || true
            sudo mkdir -p /opt/app
            sudo chown -R "$USER:$USER" /opt/app

      - name: Copy infra to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          overwrite: true
          source: infra.tar.gz
          target: /opt/app/

      - name: Unpack infra
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            cd /opt/app
            tar -xzf infra.tar.gz
            rm -f infra.tar.gz

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          DKR_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DKR_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          envs: FIREBASE_SERVICE_ACCOUNT,DKR_USER,DKR_TOKEN
          script: |
            set -euo pipefail
            APP_DIR="/opt/app"
            cd "$APP_DIR"

            # Write .env file with expanded variables
            cat > .env <<EOF
            FIREBASE_SERVICE_ACCOUNT=$FIREBASE_SERVICE_ACCOUNT
            EOF

            # Ensure Docker installed
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER" || true
              sudo systemctl enable --now docker
            fi

            # Ensure Docker Compose installed
            if ! docker compose version >/dev/null 2>&1; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Docker Hub login
            if [ -n "${DKR_USER:-}" ] && [ -n "${DKR_TOKEN:-}" ]; then
              echo "$DKR_TOKEN" | docker login -u "$DKR_USER" --password-stdin
            fi

            # Validate docker-compose
            docker compose --env-file .env -f docker-compose.yml config

            # Cleanup old containers/images
            docker ps -aq --filter "name=express-app-admin" | xargs -r docker rm -f || true
            docker ps -aq --filter "ancestor=admin-app" | xargs -r docker rm -f || true
            if [ -n "${DKR_USER:-}" ]; then
              docker ps -aq --filter "ancestor=${DKR_USER,,}/admin-app:latest" | xargs -r docker rm -f || true
            fi
            docker images -q --filter "dangling=true" | xargs -r docker rmi -f || true
            docker rmi -f $(docker images -q admin-app) 2>/dev/null || true
            if [ -n "${DKR_USER:-}" ]; then
              docker rmi -f "${DKR_USER,,}/admin-app:latest" 2>/dev/null || true
            fi

            # Pull latest image
            if [ -n "${DKR_USER:-}" ]; then
              docker pull "${DKR_USER,,}/admin-app:latest"
            fi

            # Start Nginx + first app
            docker compose --env-file .env up -d --force-recreate --pull always nginx express-app-admin-1

            # Validate nginx config
            docker compose run --rm nginx nginx -t

            # Render upstreams dynamically if script exists
            if [ -f scripts/render_upstream.sh ]; then
              chmod +x scripts/render_upstream.sh
              bash scripts/render_upstream.sh
            fi

            # Start remaining replicas
            docker compose --env-file .env up -d --force-recreate --pull always express-app-admin-2 express-app-admin-3

            # Reload nginx
            docker compose exec -T nginx nginx -s reload
